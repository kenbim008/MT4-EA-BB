//+------------------------------------------------------------------+
//|                                                      MA_Cross_EA |
//|                        Generated by MetaEditor                   |
//+------------------------------------------------------------------+
#property strict

// Input parameters
input int MAPeriod = 12;                // MA Period
input int MAShift = 6;                  // MA Shift
input double LotSize = 0.01;            // Lot Size
input double EntryDistance = 1.0;       // Distance for trade entry (in $)
input double ExitDistance = 1.0;        // Distance for trade exit (in $)
input int MagicNumber = 123456;         // Magic Number for EA

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
    // Initialization code
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    // Deinitialization code
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
    // Calculate MA value
    double MA_Value = iMA(NULL, 0, MAPeriod, MAShift, MODE_SMA, PRICE_CLOSE, 0);

    // Check for Buy entry condition
    if (Ask > MA_Value + EntryDistance && CountTrades(OP_BUY) == 0)
    {
        CloseAllTrades(OP_SELL); // Close any Sell trades before opening a Buy
        OpenTrade(OP_BUY);
    }

    // Check for Sell entry condition
    if (Bid < MA_Value - EntryDistance && CountTrades(OP_SELL) == 0)
    {
        CloseAllTrades(OP_BUY); // Close any Buy trades before opening a Sell
        OpenTrade(OP_SELL);
    }

    // Check for Buy exit condition
    if (Bid < MA_Value - ExitDistance && CountTrades(OP_BUY) > 0)
    {
        CloseAllTrades(OP_BUY);
    }

    // Check for Sell exit condition
    if (Ask > MA_Value + ExitDistance && CountTrades(OP_SELL) > 0)
    {
        CloseAllTrades(OP_SELL);
    }
}

//+------------------------------------------------------------------+
//| Function to open a trade                                         |
//+------------------------------------------------------------------+
void OpenTrade(int cmd)
{
    int ticket = OrderSend(Symbol(), cmd, LotSize, cmd == OP_BUY ? Ask : Bid, 3, 0, 0, "", MagicNumber, 0, clrNONE);
    if (ticket < 0)
    {
        Print("Error opening trade: ", GetLastError());
    }
}

//+------------------------------------------------------------------+
//| Function to close all trades of a specific type                  |
//+------------------------------------------------------------------+
void CloseAllTrades(int cmd)
{
    for (int i = OrdersTotal() - 1; i >= 0; i--)
    {
        if (OrderSelect(i, SELECT_BY_POS) && OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol())
        {
            if (OrderType() == cmd)
            {
                OrderClose(OrderTicket(), OrderLots(), OrderType() == OP_BUY ? Bid : Ask, 3, clrNONE);
            }
        }
    }
}

//+------------------------------------------------------------------+
//| Function to count open trades of a specific type                 |
//+------------------------------------------------------------------+
int CountTrades(int cmd)
{
    int count = 0;
    for (int i = OrdersTotal() - 1; i >= 0; i--)
    {
        if (OrderSelect(i, SELECT_BY_POS) && OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol())
        {
            if (OrderType() == cmd)
            {
                count++;
            }
        }
    }
    return count;
}