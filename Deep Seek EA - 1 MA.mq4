#define MA_1_EA_H
//+------------------------------------------------------------------+
//|                                                      MA_Cross_EA |
//|                        Generated by MetaEditor                   |
//+------------------------------------------------------------------+
#property strict
#include <TradeVantage_Util.mqh>

// Input parameters
input int MAPeriod = 12;                // MA Period
input int MAShift = 6;                  // MA Shift
input double LotSize = 0.01;            // Lot Size
input double EntryDistance = 1.0;       // Distance for trade entry (in $)
input double ExitDistance = 1.0;        // Distance for trade exit (in $)
input int MagicNumber = 123456;         // Magic Number for EA
input double MULT = 1.5;                   // Multiplier for lot size  

double currentLotsize = LotSize;
int previoursBars = 0;


#define VALID_ACCOUNT ACCOUNT_NUMBER
#define START_DATE  D'2024.03.01'  // YYYY.MM.DD
#define END_DATE    D'2024.03.31'  // YYYY.MM.DD
#define START_HOUR  9    // Start time (24-hour format)
#define END_HOUR    13   // End time (4-hour window after start)
#define START_MIN   0    // Start minute
#define END_MIN     0    // End minute
#define TIMER_PERIOD TIMER_INTERVAL
//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
    // Initialization code
    currentLotsize = LotSize;
    return(EA1_MA_OnInit());
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
    EventKillTimer();

}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
    // Check if Running on strategy Teste 
    RemoveIndicagtorsOnTester();
    EA1_MA_OnTickDashboard();
    // Calculate MA value
    double MA_Value = iMA(NULL, 0, MAPeriod, MAShift, MODE_SMA, PRICE_CLOSE, 0);

    // Check for Buy entry condition
    if previousBars != Bars
    {
        previoursBars = Bars;
        UpdateDateValues();
    }
    if (Close[1] > MA_Value + EntryDistance && Open[1] < MA_Value && CountTrades(OP_BUY) == 0 && previoursBars != Bars)
    {
        CloseAllTrades(OP_SELL); // Close any Sell trades before opening a Buy
        OpenTrade(OP_BUY);
        TOTALBUY_trades++;
    }

    // Check for Sell entry condition
    if (Close[1] < MA_Value - EntryDistance && Open[1] > MA_Value && CountTrades(OP_SELL) == 0 && previoursBars != Bars)
    {
        CloseAllTrades(OP_BUY); // Close any Buy trades before opening a Sell
        OpenTrade(OP_SELL);
        TOTALSELL_trades++;
    }

    // Check for Buy exit condition
    if (Close[1] < MA_Value - ExitDistance && CountTrades(OP_BUY) > 0)
    {
        CloseAllTrades(OP_BUY);
    }

    // Check for Sell exit condition
    if (Close[1] > MA_Value + ExitDistance && CountTrades(OP_SELL) > 0)
    {
        CloseAllTrades(OP_SELL);
    }
}

//+------------------------------------------------------------------+
//| Function to open a trade                                         |
//+------------------------------------------------------------------+
void OpenTrade(int cmd)
{
    int ticket = OrderSend(Symbol(), cmd, currentLotsize, cmd == OP_BUY ? Ask : Bid, 3, 0, 0, "", MagicNumber, 0, clrNONE);
    if (ticket < 0)
    {
        Print("Error opening trade: ", GetLastError());
    }
}

//+------------------------------------------------------------------+
//| Function to close all trades of a specific type                  |
//+------------------------------------------------------------------+
void CloseAllTrades(int cmd)
{
    for (int i = OrdersTotal() - 1; i >= 0; i--)
    {
        if (OrderSelect(i, SELECT_BY_POS) && OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol())
        {
            if (OrderType() == cmd)
            {
                double profit     = OrderProfit(); // Built-in function to check trade profit/loss
                OrderClose(OrderTicket(), OrderLots(), OrderType() == OP_BUY ? Bid : Ask, 3, clrNONE);
                countTotalProfits();

                string dailyProfitText = "This Day's Profit: " + DoubleToString(TOTALDAY_profit, 2);
                string WeeklyProfitText = "This Week's Profit: " + DoubleToString(TOTALWEEK_profit, 2);
                string MonthlyProfitText = "This Month's Profit: " + DoubleToString(TOTALMONTH_profit, 2);

                // Update the labels with the formatted text
                UpdateLabel("This Day's Profit", dailyProfitText);
                UpdateLabel("This Week's Profit", WeeklyProfitText);
                UpdateLabel("This Month's Profit", MonthlyProfitText);

                if(profit > 0) {
                    currentLotsize = LotSize;
                } else if(profit < 0) {
                    currentLotsize *= MULT;
                } else {
                    Print("Trade closed at break-even.");
                }
            }
        }
    }
}

//+------------------------------------------------------------------+
//| Function to count open trades of a specific type                 |
//+------------------------------------------------------------------+
int CountTrades(int cmd)
{
    int count = 0;
    for (int i = OrdersTotal() - 1; i >= 0; i--)
    {
        if (OrderSelect(i, SELECT_BY_POS) && OrderMagicNumber() == MagicNumber && OrderSymbol() == Symbol())
        {
            if (OrderType() == cmd)
            {
                count++;
            }
        }
    }
    return count;
}

void OnTimer()
{
    datetime currentTime = TimeCurrent();  // Get current server time
    int currentHour = Hour();
    int currentMinute = Minute();

    // Check if the current date is within range
    if (currentTime < START_DATE || currentTime > END_DATE)
    {
        Print("EA Has Expired. Stopping EA...");
        ExpertRemove();  // Quit EA
        return;
    }

    // Check if the current time is outside the allowed timeframe
    if (currentHour < START_HOUR || (currentHour == START_HOUR && currentMinute < START_MIN) ||
        currentHour > END_HOUR || (currentHour == END_HOUR && currentMinute >= END_MIN))
    {
        Print("EA Has Expired. Stopping EA...");
        ExpertRemove();  // Quit EA
        return;
    }
    
    // EA runs normally if within time range
    Print("EA is running. Current Time: ", TimeToString(currentTime, TIME_SECONDS));
    EventSetTimer(TIMER_INTERVAL);
}