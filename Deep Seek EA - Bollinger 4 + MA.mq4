//+------------------------------------------------------------------+
//|                                                      BB_MA_EA.mq4|
//|                        Generated by MetaEditor                   |
//|                                                                  |
//+------------------------------------------------------------------+
#property strict

// Input parameters
input double LotSize = 0.1;                // Lot size
input int BBPeriod = 20;                   // Bollinger Bands period
input double BBDeviation = 2.0;            // Bollinger Bands deviation
input int FastMAPeriod = 10;               // Fast Moving Average period
input int SlowMAPeriod = 20;               // Slow Moving Average period
input int MagicNumber = 123456;            // Magic number for trades
input int Slippage = 3;                    // Slippage in points
input int StopLoss = 50;                   // Stop loss in points
input int TakeProfit = 100;                // Take profit in points
input long AllowedAccountNumber = 0;       // Allowed account number (0 = any account)
input int MaxTradesPerCandleBuy = 1;       // Maximum buy trades per candle
input int MaxTradesPerCandleSell = 1;      // Maximum sell trades per candle

// Global variables
int LastCrossDirection = 0;                // 0 = No cross, 1 = Up, -1 = Down
datetime LastTradeTime = 0;                // Time of the last candle
int BuyTradesThisCandle = 0;               // Number of buy trades executed this candle
int SellTradesThisCandle = 0;              // Number of sell trades executed this candle

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   // Check if the EA is allowed to run on this account
   if (AllowedAccountNumber != 0 && AccountNumber() != AllowedAccountNumber)
     {
      Alert("EA is not allowed to run on this account. Allowed account: ", AllowedAccountNumber);
      return(INIT_FAILED);
     }
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   // Deinitialization code
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   // Check if the EA is allowed to run on this account
   if (AllowedAccountNumber != 0 && AccountNumber() != AllowedAccountNumber)
     {
      return; // Exit if the account number does not match
     }

   // Get the current candle time
   datetime CurrentCandleTime = iTime(NULL, 0, 0);

   // Reset trade counters if a new candle has started
   if (CurrentCandleTime != LastTradeTime)
     {
      BuyTradesThisCandle = 0;
      SellTradesThisCandle = 0;
      LastTradeTime = CurrentCandleTime;
     }

   // Get Bollinger Bands values
   double MiddleBand = iBands(NULL, 0, BBPeriod, BBDeviation, 0, PRICE_CLOSE, MODE_MAIN, 0);
   double UpperBand = iBands(NULL, 0, BBPeriod, BBDeviation, 0, PRICE_CLOSE, MODE_UPPER, 0);
   double LowerBand = iBands(NULL, 0, BBPeriod, BBDeviation, 0, PRICE_CLOSE, MODE_LOWER, 0);

   // Get Moving Average values
   double FastMA = iMA(NULL, 0, FastMAPeriod, 0, MODE_SMA, PRICE_CLOSE, 0);
   double SlowMA = iMA(NULL, 0, SlowMAPeriod, 0, MODE_SMA, PRICE_CLOSE, 0);

   // Get current price
   double CurrentPrice = Close[0];

   // Check for Bollinger Bands cross conditions
   bool BB_BuySignal = (CurrentPrice > MiddleBand && LastCrossDirection != 1);
   bool BB_SellSignal = (CurrentPrice < MiddleBand && LastCrossDirection != -1);

   // Check for Moving Average crossover conditions
   bool MA_BuySignal = (FastMA > SlowMA);
   bool MA_SellSignal = (FastMA < SlowMA);

   // Execute trades only if both strategies agree
   if (BB_BuySignal && MA_BuySignal && BuyTradesThisCandle < MaxTradesPerCandleBuy)
     {
      // Price crossed middle band going up and Fast MA is above Slow MA
      LastCrossDirection = 1;
      OpenTrade(OP_BUY);
      BuyTradesThisCandle++; // Increment buy trade counter
     }
   else if (BB_SellSignal && MA_SellSignal && SellTradesThisCandle < MaxTradesPerCandleSell)
     {
      // Price crossed middle band going down and Fast MA is below Slow MA
      LastCrossDirection = -1;
      OpenTrade(OP_SELL);
      SellTradesThisCandle++; // Increment sell trade counter
     }
  }
//+------------------------------------------------------------------+
//| Function to open a trade                                         |
//+------------------------------------------------------------------+
void OpenTrade(int OrderType)
  {
   double SL = 0;
   double TP = 0;

   if (OrderType == OP_BUY)
     {
      SL = Bid - StopLoss * Point;
      TP = Bid + TakeProfit * Point;
     }
   else if (OrderType == OP_SELL)
     {
      SL = Ask + StopLoss * Point;
      TP = Ask - TakeProfit * Point;
     }

   int Ticket = OrderSend(Symbol(), OrderType, LotSize, (OrderType == OP_BUY ? Ask : Bid), Slippage, SL, TP, "BB_MA_EA", MagicNumber, 0, (OrderType == OP_BUY ? clrBlue : clrRed));

   if (Ticket < 0)
     {
      Print("Error opening order: ", GetLastError());
     }
  }
//+------------------------------------------------------------------+